// <auto-generated />
using System;
using Becoming.Core.TaskManager.Infrastructure.PostgreSql;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Becoming.Core.TaskManager.Infrastructure.PostgreSql.Migrations
{
    [DbContext(typeof(TaskManagerPostgreSqlContext))]
    [Migration("20230628171557_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("tasks")
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Becoming.Core.TaskManager.Infrastructure.Models.SubtaskSaveModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(3072)
                        .HasColumnType("character varying(3072)");

                    b.Property<bool>("IsArchive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsComplete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Guid>("SummaryTaskId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SummaryTaskId");

                    b.ToTable("subtask", "tasks");
                });

            modelBuilder.Entity("Becoming.Core.TaskManager.Infrastructure.Models.SummaryTaskSaveModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(3072)
                        .HasColumnType("character varying(3072)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsArchive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsComplete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("OnlyDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("TaskManagerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("TaskManagerId");

                    b.ToTable("summary_task", "tasks");
                });

            modelBuilder.Entity("Becoming.Core.TaskManager.Infrastructure.Models.TaskManagerSaveModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsArchive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.ToTable("task_manager", "tasks");
                });

            modelBuilder.Entity("Becoming.Core.TaskManager.Infrastructure.Models.SubtaskSaveModel", b =>
                {
                    b.HasOne("Becoming.Core.TaskManager.Infrastructure.Models.SummaryTaskSaveModel", "SummaryTask")
                        .WithMany("Subtasks")
                        .HasForeignKey("SummaryTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SummaryTask");
                });

            modelBuilder.Entity("Becoming.Core.TaskManager.Infrastructure.Models.SummaryTaskSaveModel", b =>
                {
                    b.HasOne("Becoming.Core.TaskManager.Infrastructure.Models.TaskManagerSaveModel", "TaskManager")
                        .WithMany("SummaryTasks")
                        .HasForeignKey("TaskManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskManager");
                });

            modelBuilder.Entity("Becoming.Core.TaskManager.Infrastructure.Models.TaskManagerSaveModel", b =>
                {
                    b.OwnsOne("Becoming.Core.TaskManager.Infrastructure.Models.CategoryModel", "Category", b1 =>
                        {
                            b1.Property<Guid>("TaskManagerId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.HasKey("TaskManagerId");

                            b1.ToTable("task_manager_category", "tasks");

                            b1.WithOwner("TaskManager")
                                .HasForeignKey("TaskManagerId");

                            b1.Navigation("TaskManager");
                        });

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Becoming.Core.TaskManager.Infrastructure.Models.SummaryTaskSaveModel", b =>
                {
                    b.Navigation("Subtasks");
                });

            modelBuilder.Entity("Becoming.Core.TaskManager.Infrastructure.Models.TaskManagerSaveModel", b =>
                {
                    b.Navigation("SummaryTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
